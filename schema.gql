# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  email: String!
  full_name: String!
  hashed_refresh_token: String!
  id: ID!
  is_active: Boolean!
  is_creator: Boolean!
  password: String!
  phone: String!
}

type Advertisement {
  dermantin: Dermantin!
  discount_percent: Float!
  end_date: DateTime!
  id: ID!
  start_date: DateTime!
  status: AdvertisementStatus!
  type: AdvertisementType!
}

enum AdvertisementStatus {
  ACTIVE
  INACTIVE
}

enum AdvertisementType {
  BANNER
  SLIDER
}

type Category {
  dermantins: [Dermantin!]!
  id: ID!
  logo: String
  name: String!
}

type Chat {
  id: Int!
  store: Store!
  storeId: Int!
  user: User!
  userId: Int!
}

input CreateAdminDto {
  confirm_password: String!
  email: String!
  full_name: String!
  password: String!
  phone: String!
}

input CreateCategoryDto {
  logo: String
  name: String!
}

input CreateOrderDto {
  dermantinId: Int!
  remainingPrice: Float!
  storeId: Int!
  totalPrice: Float!
  userId: Int!
}

input CreateUserDto {
  fullname: String!
  lang: UserLang!
  phone: String!
  region: UserRegion!
  role: UserRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dermantin {
  advertisements: [Advertisement!]
  category: Category!
  class: DermantinClass!
  id: ID!
  name: String!
  price: Float!
  rating: Float!
}

enum DermantinClass {
  LUX
  PREMIUM
  STANDARD
}

type Mutation {
  createAdmin(createAdminInput: CreateAdminDto!): Admin!
  createCategory(createCategoryInput: CreateCategoryDto!): Category!
  createOrder(createOrderDto: CreateOrderDto!): Order!
  createUser(input: CreateUserDto!): User!
  deleteOrder(id: Int!): Boolean!
  removeAdmin(id: ID!): Boolean!
  removeCategory(id: ID!): Category!
  removeUser(id: ID!): User!
  updateAdmin(id: ID!, updateAdminInput: UpdateAdminDto!): Admin!
  updateCategory(id: ID!, updateCategoryInput: UpdateCategoryDto!): Category!
  updateOrder(id: Int!, updateOrderDto: UpdateOrderDto!): Order!
  updateUser(id: ID!, input: UpdateUserDto!): User!
}

type Order {
  dermantin: Dermantin!
  dermantinId: Int!
  id: Int!
  payments: [Payment!]
  remainingPrice: Float!
  store: Store!
  storeId: Int!
  totalPrice: Float!
  user: User!
  userId: Int!
}

type Payment {
  amount: Float!
  id: Int!
  method: PaymentMethod!
  order: Order!
  status: PaymentStatus!
  user: User!
}

enum PaymentMethod {
  CARD
  CASH
  TRANSFER
}

enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
}

type Query {
  findAllAdmin: [Admin!]!
  findAllCategory: [Category!]!
  findAllUsers: [User!]!
  findOneAdmin(id: ID!): Admin!
  findOneCategory(id: ID!): Category!
  findOneUsers(id: ID!): User!
  getAllOrders: [Order!]!
  getOrder(id: Int!): Order!
}

enum Region {
  BUKHARA
  FERGANA
  SAMARKAND
  TASHKENT
}

type Review {
  dermantin: Dermantin!
  dermantinId: Int!
  id: Int!
  ranking: Float!
  user: User!
  userId: Int!
}

enum Status {
  ACTIVE
  INACTIVE
}

type Store {
  chats: [Chat!]
  description: String!
  id: Int!
  logoUrl: String!
  manager: User!
  managerId: Int!
  name: String!
  rating: Review!
  ratingId: Int!
  region: Region!
  status: Status!
}

input UpdateAdminDto {
  email: String
  full_name: String
  is_active: Boolean
  is_creator: Boolean
  password: String
  phone: String
}

input UpdateCategoryDto {
  logo: String
  name: String
}

input UpdateOrderDto {
  dermantinId: Int
  remainingPrice: Float
  storeId: Int
  totalPrice: Float
  userId: Int
}

input UpdateUserDto {
  fullname: String
  phone: String
}

type User {
  chats: [Chat!]
  fullname: String!
  id: ID!
  is_verified: Float!
  lang: UserLang!
  payments: [Payment!]
  phone: String!
  region: UserRegion!
  role: UserRole!
}

enum UserLang {
  RU
  UZ
}

enum UserRegion {
  ANDIJON
  BUXORO
  FARGONA
  JIZZAX
  NAMANGAN
  NAVOIY
  QASHQADARYO
  QORAQALPOGISTON
  SAMARQAND
  SIRDARYO
  SURXONDARYO
  TOSHKENT
  XORAZM
}

enum UserRole {
  MANAGER
  USER
}